{
  "address": "0xb8026085CfcD6D0F3D06023e541466A28D5deb9B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LIQUIDATE_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "acceptedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "add1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "add2",
          "type": "address"
        }
      ],
      "name": "getAccount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct DefiLendingDapp.Account",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forRepayToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mortgageToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mortgageAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        }
      ],
      "name": "mortgageAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayBorrowTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAccepted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8735b1b7f1fb6401831640c4dcb924b1696a6477f8c367bdeb45a023d53d34c",
  "receipt": {
    "to": null,
    "from": "0xFeb5DDA8bbd9746B0b59b0b84964AF37E9172A8C",
    "contractAddress": "0xb8026085CfcD6D0F3D06023e541466A28D5deb9B",
    "transactionIndex": 108,
    "gasUsed": "3282492",
    "logsBloom": "0x
    "blockHash": "0x6b040acab7f58fca783bdc404c25f8c044bdfae6f58141c8df1564339ea9d547",
    "transactionHash": "0xf8735b1b7f1fb6401831640c4dcb924b1696a6477f8c367bdeb45a023d53d34c",
    "logs": [],
    "blockNumber": 8136703,
    "cumulativeGasUsed": "19112504",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9ee14d701b6333a03d9ebfc7103d2bf1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIQUIDATE_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct DefiLendingDapp.Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forRepayToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralTokenAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mortgageToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mortgageAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"}],\"name\":\"mortgageAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayBorrowTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAccepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DefiLendingDapp.sol\":\"DefiLendingDapp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/DefiLendingDapp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport \\\"hardhat/console.sol\\\"; // \\u4ec5\\u9650 Hardhat \\u73af\\u5883\\n\\nimport \\\"./MyERC20Token.sol\\\";\\n\\n// 1\\uff0c\\u53ea\\u6709\\u5b58\\u6b3e\\u624d\\u8ba1\\u7b97\\u5229\\u606f\\n// 2\\uff0c\\u62b5\\u62bc\\u548c\\u5b58\\u6b3e\\u6982\\u5ff5\\u8981\\u7406\\u6e05\\u695a\\n//      - \\u5b58\\u6b3e\\u4e0e\\u53d6\\u6b3e\\u662f\\u4e00\\u4e2a\\u7b49\\u7ea7\\uff1a\\u7275\\u626f\\u5230\\u5229\\u606f\\u8ba1\\u7b97\\n//      - \\u62b5\\u62bc\\u3001\\u501f\\u6b3e\\u4e0e\\u8fd8\\u6b3e\\u662f\\u4e00\\u4e2a\\u7b49\\u7ea7\\uff1a\\n// 3\\uff0c\\u8f93\\u5165\\u7684\\u90fd\\u8981 x1e18 \\uff08\\u56e0\\u4e3a\\u6709\\u53ef\\u80fd\\u8981\\u8f93\\u5165\\u5c0f\\u6570\\uff0c\\u8fd9\\u4e9b\\u5185\\u5bb9\\u540e\\u7eed\\u90fd\\u8981\\u5728\\u524d\\u7aef\\u5904\\u7406\\uff09\\n\\ncontract DefiLendingDapp {\\n\\n    // ========================================== \\u6570\\u636e\\u7ed3\\u6784\\n    // \\u5f53\\u524d\\u501f\\u8d37\\u6c60\\u5b50\\u4e2d\\u4ee3\\u5e01\\u7684\\u5b58\\u50a8\\u6570\\u636e\\u7ed3\\u6784\\n    /**\\n     * \\u5e74\\u5316\\u5229\\u7387: \\u6307\\u5982\\u679c\\u8d44\\u91d1\\u501f\\u51fa\\u6216\\u5b58\\u5165\\u4e00\\u6574\\u5e74\\u6240\\u83b7\\u5f97\\u7684\\u5229\\u606f\\u6bd4\\u7387\\u3002\\n     *      \\u5229\\u606f = \\u672c\\u91d1 \\u00d7 \\u5e74\\u5229\\u7387 \\u00d7 \\u65f6\\u95f4\\uff08\\u5e74\\uff09\\n     *      \\u5b58\\u50a8\\u7684\\u662f\\u653e\\u5927100\\u500d\\u7684\\u503c\\uff0c\\u8ba1\\u7b97\\u7684\\u65f6\\u5019\\u5f90\\u9700\\u8981\\u9664\\u4ee5100 (\\u907f\\u514d\\u6d6e\\u70b9\\u6570\\u8ba1\\u7b97)\\n     *          - \\u5982 1% \\u503c\\u4e3a 1\\n     *          - \\u5982 100% \\u503c\\u4e3a 100\\n     * \\u62b5\\u62bc\\u56e0\\u5b50: \\u5173\\u952e\\u98ce\\u9669\\u63a7\\u5236\\u53c2\\u6570\\uff0c\\u5b83\\u51b3\\u5b9a\\u4e86\\u7528\\u6237\\u53ef\\u4ee5\\u7528\\u591a\\u5c11\\u62b5\\u62bc\\u8d44\\u4ea7\\u501f\\u51fa\\u5176\\u4ed6\\u8d44\\u4ea7\\n     *      \\u6700\\u5927\\u53ef\\u501f\\u91d1\\u989d = \\u62b5\\u62bc\\u8d44\\u4ea7\\u4ef7\\u503c \\u00d7 \\u62b5\\u62bc\\u56e0\\u5b50\\n     *          - \\u7528\\u6237\\u62b5\\u62bc\\u4ef7\\u503c $10,000 \\u7684ETH\\uff08\\u62b5\\u62bc\\u56e0\\u5b5080%\\uff09\\n     *              \\u5219\\u6700\\u5927\\u53ef\\u501f\\uff1a$10,000 \\u00d7 80 = $8,000 \\u5176\\u4ed6\\u8d44\\u4ea7\\n     *      \\u5b58\\u50a8\\u7684\\u662f\\u653e\\u5927100\\u500d\\u7684\\u503c\\uff0c\\u8ba1\\u7b97\\u7684\\u65f6\\u5019\\u5f90\\u9700\\u8981\\u9664\\u4ee5100 (\\u907f\\u514d\\u6d6e\\u70b9\\u6570\\u8ba1\\u7b97)\\n     */\\n    struct TokenInfo {\\n        bool isAccepted;    // \\u662f\\u5426\\u63a5\\u53d7\\u8be5\\u4ee3\\u5e01\\n        uint256 totalSupply; // \\u603b\\u5b58\\u6b3e\\u91cf\\n        uint256 totalBorrowed; // \\u603b\\u501f\\u8d37\\u91cf\\n        uint256 interestRate; // \\u5e74\\u5316\\u5229\\u7387\\uff08\\u767e\\u5206\\u6570\\u7684\\u5c0f\\u6570\\u4e58\\u4ee5\\u4e86 1e18\\uff09\\n        uint256 collateralFactor; // \\u62b5\\u62bc\\u56e0\\u5b50\\uff08\\u767e\\u5206\\u6570\\u7684\\u5c0f\\u6570\\u4e58\\u4ee5\\u4e86 1e18\\uff09\\n    }\\n\\n    // \\u7528\\u6237\\u8d26\\u6237\\u6570\\u636e\\n    struct Account {\\n        uint256 deposited;  // \\u5b58\\u6b3e\\u91d1\\u989d\\n        uint256 borrowed;   // \\u501f\\u6b3e\\u91d1\\u989d\\n        uint256 lastUpdated; // \\u4e0a\\u6b21\\u66f4\\u65b0\\u65f6\\u95f4\\n    }\\n\\n    // ========================================== \\u53d8\\u91cf\\u5b9a\\u4e49\\n    // \\u521b\\u5efa\\u8005\\n    address public _owner;  \\n    // \\u7cbe\\u5ea6\\n    uint256 public constant PRECISION = 1e18;  // \\u4ee3\\u5e01\\u6570\\u91cf\\u6269\\u5927\\u4e86\\u8fd9\\u4e2a\\u591a\\u500d\\n    // \\u6e05\\u7b97\\u5956\\u52b1\\u5206\\u6570(\\u5956\\u52b110%)\\n    uint256 public constant LIQUIDATE_REWARD = (11 * PRECISION) / 10;   // \\u539f\\u6765\\u7684 110%\\n\\n    // \\u652f\\u6301\\u7684\\u4ee3\\u5e01\\u5217\\u8868\\n    mapping(address => TokenInfo) public tokens; \\n    // \\u4ee3\\u5e01\\u4ef7\\u683c (1e18\\u7cbe\\u5ea6)\\n    mapping(address => uint256) public tokenPrices;   // \\u4ef7\\u683c\\u4e5f\\u662f\\u4e58\\u4ee5 1e18 \\u4e86\\n    // \\u7528\\u6237\\u5b58\\u501f\\u6570\\u636e: \\u7528\\u6237--(\\u5bf9\\u67d0\\u4e2a\\u4ee3\\u5e01--\\u64cd\\u4f5c\\u4fe1\\u606f)\\n    mapping(address => mapping(address => Account)) public accounts; \\n    // \\u65b0\\u589e\\u5b58\\u50a8\\u6240\\u6709token\\u5730\\u5740\\u7684\\u53d8\\u91cf\\uff08\\u7528\\u4e8e\\u904d\\u5386\\u6240\\u6709token\\uff0c\\u627e\\u51fa\\u67d0\\u4e2a\\u7528\\u6237\\u7684\\u5b58\\u3001\\u501f\\u4fe1\\u606f\\uff09\\n    address[] public acceptedTokens; // \\u5b58\\u50a8\\u6240\\u6709\\u652f\\u6301\\u7684\\u4ee3\\u5e01\\u5730\\u5740\\n\\n    // \\u4e00\\u5e74\\u7684\\u79d2\\u6570\\n    uint256 public constant SECONDS_PER_YEAR = 31536000; \\n\\n    // ========================================== \\u4e8b\\u4ef6\\u5b9a\\u4e49\\n    event Deposit(address indexed user, address indexed token, uint256 amount);\\n    event Withdraw(address indexed user, address indexed token, uint256 amount);\\n    event Borrow(address indexed user, address indexed token, uint256 amount);\\n    event Repay(address indexed user, address indexed token, uint256 amount);\\n    event Liquidate(\\n        address indexed liquidator,  // \\u6e05\\u7b97\\u4eba\\n        address indexed borrower,  // \\u4e3a\\u503a\\u52a1\\u4eba\\n        address indexed collateralToken,  // \\u507f\\u8fd8\\u503a\\u52a1\\u4ee3\\u5e01A\\n        address debtToken  // \\u4f7f\\u7528\\u4ee3\\u5e01B\\u652f\\u4ed8\\u7684\\n    );\\n\\n    // ========================================== Getter\\u51fd\\u6570\\n    function getAccount(address add1, address add2) public view returns (Account memory) {\\n        return accounts[add1][add2];\\n    }\\n\\n    // ========================================== \\u5b8f\\u5b9a\\u4e49\\n    // \\u4ec5\\u4ec5owner\\u53ef\\u64cd\\u4f5c\\n    modifier OnlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner can call this!\\\");\\n        _;\\n    }\\n\\n    // ========================================== \\u51fd\\u6570\\u5b9a\\u4e49\\n    // \\u521d\\u59cb\\u5316\\u5408\\u7ea6\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    // \\u6dfb\\u52a0\\u5408\\u7ea6\\u4e2d\\u652f\\u6301\\u501f\\u8d37\\u7684\\u4ee3\\u5e01\\n    function addToken(\\n        address tokenAddress,  // \\u4ee3\\u5e01\\u5730\\u5740\\n        uint256 interestRate,\\n        uint256 collateralFactor\\n    ) external OnlyOwner {\\n        require(!tokens[tokenAddress].isAccepted, \\\"Token already added\\\");\\n        // \\u62b5\\u62bc\\u56e0\\u5b50\\u4e0d\\u80fd\\u9ad8\\uff08\\u6211\\u81ea\\u5df1\\u4e0d\\u80fd\\u4e8f\\uff0c\\u4e0d\\u652f\\u6301\\u6d6e\\u70b9\\u8fd0\\u7b97\\uff0c\\u6240\\u4ee50.9\\u5148\\u8868\\u793a\\u4e3a9\\u518d\\u9664\\u4ee510\\uff09\\n        require(collateralFactor <= (9 * PRECISION) / 10, \\\"CollateralFactor too high\\\");\\n\\n        // \\u6dfb\\u52a0\\u4ee3\\u5e01\\n        tokens[tokenAddress] = TokenInfo({\\n            isAccepted: true,  // \\u662f\\u5426\\u63a5\\u53d7\\u8be5\\u4ee3\\u5e01\\n            totalSupply: 0,  // \\u603b\\u5b58\\u6b3e\\u91cf\\n            totalBorrowed: 0,  // \\u603b\\u501f\\u8d37\\u91cf\\n            interestRate: interestRate,  // \\u5e74\\u5316\\u5229\\u7387\\n            collateralFactor: collateralFactor  // \\u62b5\\u62bc\\u56e0\\u5b50\\n        });\\n\\n        // \\u6dfb\\u52a0\\u5230\\u652f\\u6301\\u5217\\u8868\\n        acceptedTokens.push(tokenAddress);\\n    }\\n\\n    // \\u8bbe\\u7f6e\\u67d0\\u4e2a\\u4ee3\\u5e01\\u7684\\u4ef7\\u683c (\\u4ec5owner)\\n    function setTokenPrice(\\n        address token, \\n        uint256 price\\n    ) external OnlyOwner {\\n        tokenPrices[token] = price;  // \\u8f93\\u5165\\u7684\\u5df2\\u7ecf x1e18 \\u4e86\\n    }\\n\\n    // \\u5b58\\u6b3e\\n    function deposit(\\n        address token, \\n        uint256 amount  // \\u8f93\\u5165\\u6570\\u91cf\\u4e5f\\u8981\\u8bb0\\u5f97\\u4e58 1e18\\uff08\\u56e0\\u4e3asolidity\\u4e0d\\u5141\\u8bb8\\u6d6e\\u70b9\\u8fd0\\u7b97\\uff09\\n    ) external {\\n        require(tokens[token].isAccepted, \\\"Token not supported\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(tokenPrices[token] > 0, \\\"Token price not set\\\");\\n\\n        // \\u66f4\\u65b0\\u8c03\\u7528\\u8005\\u5bf9\\u4e8e\\u67d0\\u4e2atoken\\u7684\\u5229\\u606f\\uff08\\u524d\\u9762\\u6709\\u5b58\\u6b3e\\u7684\\u5219\\u5c06\\u5229\\u606f\\u8ba1\\u7b97\\u51fa\\u6765\\u6dfb\\u52a0\\u5230\\u5b58\\u6b3e\\u603b\\u989d\\u5ea6\\u4e2d\\uff09\\n        updateInterest(msg.sender, token);\\n\\n        // \\u8f6c\\u79fb\\u4ee3\\u5e01\\uff08\\u5b58\\u5165\\uff09\\n        MyERC20Token(token).transferFrom(msg.sender, address(this), amount);\\n\\n        // \\u66f4\\u65b0 \\u5f53\\u524d\\u7528\\u4e8e\\u5bf9\\u4e8e\\u5f53\\u524dtoken\\u7684 \\u5b58\\u6b3e\\u603b\\u91cf\\n        accounts[msg.sender][token].deposited += amount;  // \\u8bb0\\u5f55\\u5b58\\u6b3e\\u6570\\u91cf\\n        tokens[token].totalSupply += amount;  // \\u603b\\u5b58\\u6b3e\\u91cf\\u66f4\\u65b0\\n\\n        emit Deposit(msg.sender, token, amount);\\n    }\\n\\n    // \\u53d6\\u6b3e\\n    function withdraw(\\n        address token,   // \\u53d6\\u67d0\\u4e2atoken\\n        uint256 amount  // \\u53d6\\u591a\\u5c11\\u94b1\\uff08\\u8f93\\u5165\\u6570\\u91cf\\u4e5f\\u8981\\u8bb0\\u5f97\\u4e58 1e18\\uff0c\\u8ba1\\u7b97\\u7684\\u65f6\\u5019\\u518d\\u9664\\u6389\\uff09\\n    ) external {\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        // \\u66f4\\u65b0\\u8c03\\u7528\\u8005\\u5f53\\u524dtoken\\u7684\\u5229\\u606f\\n        updateInterest(msg.sender, token);\\n\\n        // \\u4fdd\\u8bc1\\u5b58\\u6b3e\\u6570 \\u5927\\u4f59 \\u53d6\\u6b3e\\u91d1\\u989d\\n        require(accounts[msg.sender][token].deposited >= amount, \\\"Insufficient balance\\\");  \\n\\n        // \\u66f4\\u65b0\\u72b6\\u6001\\n        accounts[msg.sender][token].deposited -= amount;  // \\u51cf\\u53bb\\u5b58\\u6b3e\\u6570\\u91cf\\n        tokens[token].totalSupply -= amount;  // \\u51cf\\u53bb\\u5b58\\u6b3e\\u603b\\u91cf\\n\\n        // \\u8f6c\\u79fb\\u4ee3\\u5e01\\uff08\\u8f6c\\u5230\\u8c03\\u7528\\u8005\\u8d26\\u6237\\uff09\\n        MyERC20Token(token).transfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, token, amount);\\n    }\\n\\n    // \\u62b5\\u62bc\\u501f\\u6b3e\\uff08\\u5c06\\u81ea\\u8eab\\u7684\\u5e01\\u8f6c\\u5230\\u5408\\u7ea6\\u4e2d\\uff0c\\u7136\\u540e\\u501f\\u51fa\\u5e0c\\u671b\\u7684\\u5e01\\uff0c\\u4e0d\\u7275\\u626f\\u81ea\\u8eab\\u5b58\\u8fdb\\u53bb\\u7684\\u5e01\\uff09\\n    function mortgageAndBorrow (\\n        address mortgageToken,   // \\u8981\\u62b5\\u62bc\\u7684token\\n        uint256 mortgageAmount,  // \\u8981\\u62b5\\u62bc\\u7684token\\u6570\\u91cf \\uff08\\u8f93\\u5165\\u8981\\u4e58\\u4ee5 1e18\\uff09\\n        address borrowToken   // \\u8981\\u501f\\u6b3e\\u7684token\\n    ) external {\\n        require(tokens[mortgageToken].isAccepted && tokens[borrowToken].isAccepted, \\\"Token not supported\\\");\\n        require(tokenPrices[mortgageToken] > 0 && tokenPrices[borrowToken] > 0, \\\"Token price not set\\\");\\n        require(mortgageAmount > 0, \\\"mortgageAmount must be greater than 0\\\");\\n\\n        // \\u5f97\\u5230\\u62b5\\u62bc\\u4eba\\u62b5\\u62bcmortgageAmount\\u6570\\u91cf\\u7684mortgageToken\\u53ef\\u4ee5\\u501f\\u5230\\u4ee3\\u5e01borrowToken\\u7684\\u6570\\u91cfborrowAmount\\n        //      \\u501f\\u6b3e\\u6570\\u91cf = \\uff08\\u62b5\\u62bc\\u7684\\u6570\\u91cf(1e18) * \\u62b5\\u62bc\\u4ee3\\u5e01\\u7684\\u4ef7\\u683c(1e18) * \\u62b5\\u62bc\\u56e0\\u5b50(100)\\uff09/ \\u501f\\u8d37\\u4ee3\\u5e01\\u7684\\u4ef7\\u683c(1e18) * \\u500d\\u7387 * \\u62b5\\u6d88\\u4e00\\u4e2a1e18\\uff1b \\uff08\\u500d\\u7387\\u662f\\u56e0\\u4e3a \\u62b5\\u62bc\\u56e0\\u5b50 \\u6269\\u5927\\u4e86100\\u500d\\uff09\\n        uint256 borrowAmount = (mortgageAmount * tokenPrices[mortgageToken] * tokens[mortgageToken].collateralFactor) / (tokenPrices[borrowToken] * PRECISION);\\n        require(borrowAmount > 0, \\\"borrowAmount must be greater than 0\\\");\\n        require(MyERC20Token(borrowToken).balanceOf(address(this)) >= borrowAmount, \\\"Insufficient borrowAmount balance\\\");\\n        require(MyERC20Token(mortgageToken).balanceOf(msg.sender) >= mortgageAmount, \\\"Insufficient mortgageAmount balance\\\");\\n\\n        // \\u66f4\\u65b0\\u72b6\\u6001\\n        accounts[msg.sender][borrowToken].borrowed += borrowAmount;  // \\u501f\\u6b3e\\u4ee3\\u5e01\\u7684\\u91d1\\u989d\\u589e\\u52a0\\n        tokens[borrowToken].totalBorrowed += borrowAmount;  // \\u4ee3\\u5e01\\u7684\\u501f\\u8d37\\u603b\\u91cf\\u589e\\u52a0\\n\\n        // \\u8f6c\\u79fb\\u4ee3\\u5e01\\n        MyERC20Token(mortgageToken).transferFrom(msg.sender, address(this), mortgageAmount);  // \\u7ed9\\u5408\\u7ea6\\n        MyERC20Token(borrowToken).transfer(msg.sender, borrowAmount);  // \\u7ed9\\u501f\\u6b3e\\u4eba\\n\\n        emit Borrow(msg.sender, borrowToken, borrowAmount);\\n    }\\n\\n    // \\u8fd8\\u6b3e\\n    function repay(\\n        address borrowToken,  // \\u8981\\u8fd8\\u6b3e\\u7684token(\\u4e4b\\u524d\\u501f\\u51fa\\u53bb\\u7684token)\\n        uint256 repayBorrowTokenAmount,  // \\u8fd8\\u591a\\u5c11\\uff08\\u4e5f\\u5c31\\u662f\\u5141\\u8bb8\\u4e0d\\u8fd8\\u5b8c\\uff09  \\uff08\\u8f93\\u5165\\u8981\\u4e58\\u4ee5 1e18\\uff09\\n        address withdrawToken  // \\u5f97\\u5230\\u62b5\\u62bc\\u7684token\\u5730\\u5740\\n    ) external {\\n        require(tokens[withdrawToken].isAccepted && tokens[borrowToken].isAccepted, \\\"Token not supported\\\");\\n        require(tokenPrices[withdrawToken] > 0 && tokenPrices[borrowToken] > 0, \\\"Token price not set\\\");\\n        require(repayBorrowTokenAmount > 0, \\\"repayTokenAmount must be greater than 0\\\");\\n\\n        // \\u5f97\\u5230\\u7528\\u6237\\u9700\\u8981\\u4f7f\\u7528 borrowToken \\u652f\\u4ed8\\u7684\\u771f\\u5b9e\\u6570\\u91cf\\n        uint256 actualBorrowAmount = min(repayBorrowTokenAmount, accounts[msg.sender][borrowToken].borrowed);\\n\\n        // \\u5f97\\u5230\\u7528\\u6237\\u53ef\\u4ee5\\u5f97\\u5230\\u7684\\u62b5\\u62bc\\u7269\\u6570\\u91cf\\n        uint256 actualRepayBorrowTokenAmount = ( actualBorrowAmount * tokenPrices[borrowToken] * PRECISION ) / (tokenPrices[withdrawToken] * tokens[borrowToken].collateralFactor);\\n        require(actualRepayBorrowTokenAmount > 0, \\\"actualRepayBorrowTokenAmount must be greater than 0\\\");\\n        require(MyERC20Token(withdrawToken).balanceOf(address(this)) >= actualRepayBorrowTokenAmount, \\\"Insufficient actualRepayBorrowTokenAmount balance\\\");  // \\u5408\\u7ea6\\u652f\\u4ed8\\u5f97\\u8d77\\n        require(MyERC20Token(borrowToken).balanceOf(msg.sender) >= actualBorrowAmount, \\\"Insufficient actualBorrowAmount balance\\\");  // \\u7528\\u6237\\u652f\\u4ed8\\u5f97\\u8d77\\n\\n        // console.log(\\\"1:\\\", repayBorrowTokenAmount); // \\u4f1a\\u5728\\u6d4b\\u8bd5\\u7ec8\\u7aef\\u6253\\u5370\\n        // console.log(\\\"2:\\\", actualRepayBorrowTokenAmount); // \\u4f1a\\u5728\\u6d4b\\u8bd5\\u7ec8\\u7aef\\u6253\\u5370\\n\\n        // \\u66f4\\u65b0\\u72b6\\u6001\\n        accounts[msg.sender][borrowToken].borrowed -= actualBorrowAmount;\\n        tokens[borrowToken].totalBorrowed -= actualBorrowAmount;\\n\\n        // \\u8f6c\\u79fb\\u4ee3\\u5e01\\uff08\\u8fd8\\u6b3e\\uff09\\n        MyERC20Token(borrowToken).transferFrom(msg.sender, address(this), actualBorrowAmount);  // \\u7528\\u6237\\u8fd8\\u6b3e\\n        MyERC20Token(withdrawToken).transfer(msg.sender, actualRepayBorrowTokenAmount);  // \\u5f52\\u8fd8\\u501f\\u6b3e\\u4eba\\u62b5\\u62bc\\u7269\\n\\n        emit Repay(msg.sender, borrowToken, actualBorrowAmount);\\n    }\\n\\n    // \\u6e05\\u7b97\\uff08\\u5c06\\u62b5\\u62bc\\u7269\\u768410%\\u5956\\u52b1\\u7ed9\\u6e05\\u7b97\\u4eba\\uff09\\n    function liquidate(\\n        address borrower,  // \\u539f\\u6765\\u662f\\u8c01\\u501f\\u7684\\u8fd9\\u4e2a\\u94b1\\n        address collateralToken,  // \\u5f53\\u65f6\\u501f\\u94b1\\u7684\\u4eba\\u62b5\\u62bc\\u7684\\u4ec0\\u4e48\\u4ee3\\u5e01\\uff08\\u5982ETH\\uff09\\n        address forRepayToken,  // \\u5f53\\u65f6\\u501f\\u94b1\\u7684\\u4eba\\u501f\\u7684\\u4ec0\\u4e48\\u4ee3\\u5e01\\uff08\\u5982USDT\\uff09\\n        uint256 collateralTokenAmount  // \\u6e05\\u7b97\\u4eba\\u60f3\\u507f\\u8fd8\\u7684\\u503a\\u52a1\\u6570\\u91cf\\uff08\\u5982100USDT\\uff09 \\uff08\\u8f93\\u5165\\u8981\\u4e58\\u4ee5 1e18\\uff09\\n    ) external {\\n        require(tokens[collateralToken].isAccepted && tokens[forRepayToken].isAccepted, \\\"Token not supported\\\");\\n        require(tokenPrices[collateralToken] > 0 && tokenPrices[forRepayToken] > 0, \\\"Token price not set\\\");\\n        require(collateralTokenAmount > 0, \\\"collateralTokenAmount must be greater than 0\\\");\\n\\n        // \\u5f97\\u5230\\u6b20\\u503a\\u4eba\\u6b20\\u7684\\u771f\\u5b9e\\u7684\\u6570\\u91cf\\uff08\\u5f97\\u5230\\u7528\\u6237\\u60f3\\u507f\\u8fd8 \\u4e0e \\u6b20\\u503a\\u4eba\\u5b9e\\u9645\\u6b20\\u503a \\u7684\\u6700\\u5c0f\\u6570\\u91cf\\uff09\\n        uint256 actualCollateralAmount = min(collateralTokenAmount, accounts[borrower][forRepayToken].borrowed);\\n\\n        // \\u6e05\\u7b97\\u4eba\\u53ef\\u4ee5\\u5f97\\u5230\\u7684\\u62b5\\u62bc\\u7269\\u6570\\u91cf\\n        //      \\u9700\\u8981\\u652f\\u4ed8\\u7684\\u6570\\u91cf = \\uff08\\u5f85\\u8fd8\\u6b3e\\u4ee3\\u5e01\\u6570\\u91cf(1e18) * \\u5956\\u52b110%(100) * \\u4ee3\\u5e01\\u91d1\\u989d(1e18) \\uff09/ \\u5f85\\u8fd8\\u6b3e\\u4ee3\\u5e01\\u62b5\\u62bc\\u56e0\\u5b50(100) * \\u7528\\u4e8e\\u6e05\\u7b97\\u7684\\u4ee3\\u5e01\\u91d1\\u989d(1e18)\\n        uint256 forRepayAmount = (actualCollateralAmount * LIQUIDATE_REWARD * tokenPrices[forRepayToken]) / (tokenPrices[collateralToken] * tokens[forRepayToken].collateralFactor);\\n        require(forRepayAmount > 0, \\\"forRepayAmount must be greater than 0\\\");\\n        require(MyERC20Token(collateralToken).balanceOf(address(this)) >= forRepayAmount, \\\"Insufficient forRepayAmount balance\\\");  // \\u5408\\u7ea6\\u652f\\u4ed8\\u5f97\\u8d77\\n        require(MyERC20Token(forRepayToken).balanceOf(msg.sender) >= actualCollateralAmount, \\\"Insufficient actualCollateralAmount balance\\\");  // \\u7528\\u6237\\u652f\\u4ed8\\u5f97\\u8d77\\n\\n        console.log(\\\"1:\\\", actualCollateralAmount); // \\u4f1a\\u5728\\u6d4b\\u8bd5\\u7ec8\\u7aef\\u6253\\u5370\\n        console.log(\\\"2:\\\", actualCollateralAmount * LIQUIDATE_REWARD); // \\u4f1a\\u5728\\u6d4b\\u8bd5\\u7ec8\\u7aef\\u6253\\u5370\\n        console.log(\\\"3:\\\", actualCollateralAmount * LIQUIDATE_REWARD * tokenPrices[forRepayToken]); // \\u4f1a\\u5728\\u6d4b\\u8bd5\\u7ec8\\u7aef\\u6253\\u5370\\n\\n        // \\u66f4\\u65b0\\u72b6\\u6001\\n        accounts[borrower][forRepayToken].borrowed -= actualCollateralAmount;  // \\u539f\\u6765\\u501f\\u6b3e\\u4eba\\u7684\\u501f\\u6b3e\\u91d1\\u989d\\u66f4\\u65b0\\n        tokens[forRepayToken].totalBorrowed -= actualCollateralAmount;\\n        \\n        // \\u8f6c\\u79fb\\u4ee3\\u5e01\\n        MyERC20Token(forRepayToken).transferFrom(msg.sender, address(this), actualCollateralAmount);  // \\u6e05\\u7b97\\u4eba\\u5c06\\u5b9e\\u9645\\u652f\\u4ed8\\u7684\\u4ee3\\u5e01\\u8f6c\\u5230\\u5408\\u7ea6\\u4e2d\\n        MyERC20Token(collateralToken).transfer(msg.sender, forRepayAmount);  // \\u7136\\u540e\\u5c06\\u6e05\\u7b97\\u4eba\\u5e94\\u8be5\\u5f97\\u5230\\u7684\\u4ee3\\u5e01\\u8f6c\\u79fb\\u7ed9\\u6e05\\u7b97\\u4eba\\uff08\\u5956\\u52b1\\u4e8610%\\uff09\\n\\n        emit Liquidate(msg.sender, borrower, collateralToken, forRepayToken);\\n    }\\n\\n    // \\u66f4\\u65b0\\u5229\\u606f\\uff08\\u53ea\\u6709\\u5b58\\u6b3e\\u624d\\u6709\\u5229\\u606f\\uff0c\\u501f\\u8d37\\u4e0e\\u62b5\\u62bc\\u90fd\\u6ca1\\u6709\\u5229\\u606f\\uff09\\n    function updateInterest(\\n        address user, \\n        address token\\n    ) internal {\\n        // \\u7528\\u6237\\u5bf9\\u67d0\\u4e2a\\u4ee3\\u5e01\\u7684\\u64cd\\u4f5c\\u4fe1\\u606f\\n        Account storage account = accounts[user][token];\\n        // \\u7528\\u6237\\u4e0a\\u6b21\\u64cd\\u4f5c\\u7684\\u65f6\\u95f4\\u8ddd\\u79bb\\u73b0\\u5728\\u591a\\u4e45\\u4e86\\n        uint256 timeElapsed = block.timestamp - account.lastUpdated;\\n\\n        // \\u56e0\\u4e3a\\u5f53\\u524d\\u8981\\u66f4\\u65b0\\u8fd9\\u4e2a\\u7528\\u6237\\u5bf9\\u4e8e\\u8fd9\\u4e2atoken\\u7684\\u4f59\\u989d\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u8fd9\\u8fb9\\u76f4\\u63a5\\u8ba1\\u7b97\\u51fa\\u4e4b\\u524d\\u7684\\u5229\\u606f\\u52a0\\u5230\\u5b58\\u6b3e\\u4e2d\\uff08\\u8ba9\\u5229\\u606f\\u91cd\\u65b0\\u8ba1\\u7b97\\uff09\\n        //      \\u5f53\\u524d\\u7528\\u6237\\u5bf9\\u5f53\\u524dtoken\\u7684\\u64cd\\u4f5c\\u6709\\u65f6\\u95f4\\u95f4\\u9694 and \\u5f53\\u524d\\u7528\\u6237\\u5bf9\\u5f53\\u524dtoken\\u7684\\u5b58\\u6b3e\\u6570\\u91cf>0\\uff08\\u53ea\\u6709\\u5b58\\u6b3e\\u624d\\u4ea7\\u751f\\u5229\\u606f\\uff09\\n        if (timeElapsed > 0 && account.deposited > 0) {\\n            // \\u8ba1\\u7b97\\u524d\\u8fb9\\u7684\\u5b58\\u6b3e\\u5df2\\u7ecf\\u5f97\\u5230\\u7684\\u6240\\u6709\\u5229\\u606f\\uff08\\u8fd9\\u4e9b\\u5229\\u606f\\u5c06\\u4f1a\\u6dfb\\u52a0\\u5230\\u73b0\\u6709\\u7684\\u672c\\u91d1\\u4e2d\\u8fdb\\u884c\\u590d\\u5229\\uff0c\\u7136\\u540e\\u603b\\u91cf\\u518d\\u52a0\\u4e0a\\u65b0\\u52a0\\u5165\\u7684\\uff0c\\u5e76\\u4e14\\u65f6\\u95f4\\u91cd\\u7f6e\\uff09\\n            //      \\u5229\\u606f = (\\u73b0\\u6709\\u5b58\\u6b3e\\u6570\\u91cf * \\u5229\\u7387 * \\u5b58\\u50a8\\u65f6\\u95f4) / (\\u4e00\\u5e74\\u7684\\u65f6\\u95f4 * \\u5229\\u7387\\u5904\\u7406\\u4e3a\\u767e\\u5206\\u6570)\\n            uint256 interest = (account.deposited * tokens[token].interestRate * timeElapsed) / (SECONDS_PER_YEAR * PRECISION);\\n\\n            // \\u5c06\\u5229\\u606f\\u6dfb\\u52a0\\u5230\\u8be5\\u7528\\u6237\\u7684\\u5b58\\u6b3e\\u4e2d\\uff08\\u590d\\u5229\\uff09\\n            account.deposited += interest;\\n            tokens[token].totalSupply += interest;  //\\u6dfb\\u52a0\\u8be5\\u4ee3\\u5e01\\u7684\\u5b58\\u6b3e\\u603b\\u91cf\\n        }\\n        \\n        // \\u66f4\\u65b0\\u8be5\\u7528\\u6237\\u5bf9\\u4e8e\\u8be5token\\u7684\\u6700\\u65b0\\u64cd\\u4f5c\\u65f6\\u95f4\\n        account.lastUpdated = block.timestamp;\\n    }\\n    \\n    // \\u53d6\\u5c0f\\u51fd\\u6570\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xa19b3c7fbc2931084009829337ed55fb679860f08f128b60906dc6f62e0c5598\",\"license\":\"UNLICENSED\"},\"contracts/MyERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MyERC20Token is ERC20 {\\n\\n    // ========================================== \\u53d8\\u91cf\\u5b9a\\u4e49\\n    address public _owner;  // \\u521b\\u5efa\\u8005\\n\\n    // ========================================== \\u4e8b\\u4ef6\\u5b9a\\u4e49\\n    event Mint(address indexed to, uint256 amount);\\n    event Burn(address indexed from, uint256 amount);\\n\\n    // ========================================== \\u5b8f\\u5b9a\\u4e49\\n    // \\u4ec5\\u4ec5owner\\u53ef\\u64cd\\u4f5c\\n    modifier OnlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner can call this!\\\");\\n        _;\\n    }\\n    // \\u67d0\\u4e2a\\u8d26\\u6237\\u53ef\\u64cd\\u4f5c\\u4f59\\u989d\\u5145\\u8db3\\n    modifier Balancesufficient(address addr, uint256 amount) {\\n        require(balanceOf(addr) >= amount, \\\"Balance insufficient!\\\");\\n        _;\\n    }\\n\\n    // ========================================== \\u51fd\\u6570\\u5b9a\\u4e49\\n    // \\u6784\\u9020\\u51fd\\u6570\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _owner = msg.sender;\\n    }\\n\\n    // mint\\u51fd\\u6570\\uff08\\u8c03\\u7528 ERC20 \\u5185\\u90e8\\u81ea\\u5df1\\u7684 _mint \\u51fd\\u6570\\uff09\\n    function mint(address to, uint256 amount) external OnlyOwner{\\n        _mint(to, amount);\\n        emit Mint(to, amount);\\n    }\\n\\n    // burn\\u51fd\\u6570\\uff08\\u8c03\\u7528 ERC20 \\u5185\\u90e8\\u81ea\\u5df1\\u7684 _burn \\u51fd\\u6570\\uff09\\n    function burn(address from, uint256 amount) external OnlyOwner Balancesufficient(from, amount){\\n        _burn(from, amount);\\n\\n        emit Burn(from, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x21002c96b0ac46bf00a5214df2ed5c4f5453b36f57876af5d7161681d7b9133a\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613a488061005f6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063ad74b77511610097578063e486033911610066578063e486033914610299578063e6a69ab8146102cd578063f3fef3a3146102eb578063fd5908471461030757610100565b8063ad74b77514610211578063b2bdfa7b14610243578063bf5e27ec14610261578063dee1f2af1461027d57610100565b806347e7ef24116100d357806347e7ef241461019f5780635ceae9c4146101bb578063aab3f868146101d7578063aaf5eb68146101f357610100565b8063204120bc146101055780632154e6fc1461013557806336c8775414610153578063431f63c914610183575b600080fd5b61011f600480360381019061011a91906129a1565b610337565b60405161012c91906129e7565b60405180910390f35b61013d61034f565b60405161014a91906129e7565b60405180910390f35b61016d60048036038101906101689190612a2e565b610373565b60405161017a9190612a6a565b60405180910390f35b61019d60048036038101906101989190612a85565b6103b2565b005b6101b960048036038101906101b49190612a85565b610488565b005b6101d560048036038101906101d09190612ac5565b6107bf565b005b6101f160048036038101906101ec9190612b18565b610f52565b005b6101fb611872565b60405161020891906129e7565b60405180910390f35b61022b60048036038101906102269190612b7f565b61187e565b60405161023a93929190612bbf565b60405180910390f35b61024b6118b5565b6040516102589190612a6a565b60405180910390f35b61027b60048036038101906102769190612ac5565b6118d9565b005b61029760048036038101906102929190612bf6565b611fde565b005b6102b360048036038101906102ae91906129a1565b61227d565b6040516102c4959493929190612c64565b60405180910390f35b6102d56122c0565b6040516102e291906129e7565b60405180910390f35b61030560048036038101906103009190612a85565b6122c8565b005b610321600480360381019061031c9190612b7f565b6125ae565b60405161032e9190612d08565b60405180910390f35b60026020528060005260406000206000915090505481565b600a670de0b6b3a7640000600b6103669190612d52565b6103709190612dc3565b81565b6004818154811061038357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043790612e51565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050e90612ebd565b60405180910390fd5b6000811161055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055190612f29565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390612f95565b60405180910390fd5b6105e63383612663565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161062393929190612fb5565b6020604051808303816000875af1158015610642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106669190613018565b5080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546106f69190613045565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461074f9190613045565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62836040516107b391906129e7565b60405180910390a35050565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1680156108675750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b6108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d90612ebd565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411801561093457506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096a90612f95565b60405180910390fd5b600082116109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ad906130eb565b60405180910390fd5b6000610a4183600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612818565b90506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ad29190612d52565b670de0b6b3a7640000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610b269190612d52565b610b309190612d52565b610b3a9190612dc3565b905060008111610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b769061317d565b60405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bb99190612a6a565b602060405180830381865afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa91906131b2565b1015610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3290613251565b60405180910390fd5b818573ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610c759190612a6a565b602060405180830381865afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb691906131b2565b1015610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee906132e3565b60405180910390fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610d869190613303565b9250508190555081600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254610ddf9190613303565b925050819055508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610e2393929190612fb5565b6020604051808303816000875af1158015610e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e669190613018565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ea2929190613337565b6020604051808303816000875af1158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190613018565b508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac468484604051610f4391906129e7565b60405180910390a35050505050565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff168015610ffa5750600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b611039576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103090612ebd565b60405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180156110c757506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b611106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fd90612f95565b60405180910390fd5b60008111611149576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611140906133d2565b60405180910390fd5b60006111d482600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612818565b90506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112659190612d52565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a670de0b6b3a7640000600b6112bc9190612d52565b6112c69190612dc3565b846112d19190612d52565b6112db9190612d52565b6112e59190612dc3565b90506000811161132a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132190613464565b60405180910390fd5b808573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113649190612a6a565b602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a591906131b2565b10156113e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dd906134f6565b60405180910390fd5b818473ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114209190612a6a565b602060405180830381865afa15801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906131b2565b10156114a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149990613588565b60405180910390fd5b6114e16040518060400160405280600281526020017f313a00000000000000000000000000000000000000000000000000000000000081525083612831565b61154b6040518060400160405280600281526020017f323a000000000000000000000000000000000000000000000000000000000000815250600a670de0b6b3a7640000600b6115319190612d52565b61153b9190612dc3565b846115469190612d52565b612831565b6115ff6040518060400160405280600281526020017f333a000000000000000000000000000000000000000000000000000000000000815250600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a670de0b6b3a7640000600b6115db9190612d52565b6115e59190612dc3565b856115f09190612d52565b6115fa9190612d52565b612831565b81600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461168e9190613303565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546116e79190613303565b925050819055508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161172b93929190612fb5565b6020604051808303816000875af115801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e9190613018565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016117aa929190613337565b6020604051808303816000875af11580156117c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ed9190613018565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe804d8db307862a5f35a3da24942f9cb36d1b20558edaaddced90ecbc46310f9876040516118629190612a6a565b60405180910390a4505050505050565b670de0b6b3a764000081565b6003602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154905083565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1680156119815750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b6119c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b790612ebd565b60405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118015611a4e57506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8490612f95565b60405180910390fd5b60008211611ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac79061361a565b60405180910390fd5b6000670de0b6b3a7640000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b259190612d52565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611bb39190612d52565b611bbd9190612d52565b611bc79190612dc3565b905060008111611c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c03906136ac565b60405180910390fd5b808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c469190612a6a565b602060405180830381865afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8791906131b2565b1015611cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbf9061373e565b60405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611d029190612a6a565b602060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4391906131b2565b1015611d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7b906137d0565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611e139190613045565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254611e6c9190613045565b925050819055508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611eb093929190612fb5565b6020604051808303816000875af1158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef39190613018565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611f2f929190613337565b6020604051808303816000875af1158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f729190613018565b508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b5283604051611fd091906129e7565b60405180910390a350505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461206c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206390612e51565b60405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156120fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f39061383c565b60405180910390fd5b600a670de0b6b3a764000060096121139190612d52565b61211d9190612dc3565b81111561215f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612156906138a8565b60405180910390fd5b6040518060a00160405280600115158152602001600081526020016000815260200183815260200182815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101556040820151816002015560608201518160030155608082015181600401559050506004839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60016020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154905085565b6301e1338081565b6000811161230b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230290612f29565b60405180910390fd5b6123153383612663565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156123d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ce90613914565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546124669190613303565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546124bf9190613303565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612501929190613337565b6020604051808303816000875af1158015612520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125449190613018565b508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836040516125a291906129e7565b60405180910390a35050565b6125b6612913565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160020154426126f59190613303565b905060008111801561270b575060008260000154115b15612809576000670de0b6b3a76400006301e1338061272a9190612d52565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154856000015461277d9190612d52565b6127879190612d52565b6127919190612dc3565b9050808360000160008282546127a79190613045565b9250508190555080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546128009190613045565b92505081905550505b42826002018190555050505050565b60008183106128275781612829565b825b905092915050565b6128c982826040516024016128479291906139b3565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128cd565b5050565b6128e4816128dc6128e7612908565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b612934819050919050565b60405180606001604052806000815260200160008152602001600081525090565b61293c6139e3565b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061296e82612943565b9050919050565b61297e81612963565b811461298957600080fd5b50565b60008135905061299b81612975565b92915050565b6000602082840312156129b7576129b661293e565b5b60006129c58482850161298c565b91505092915050565b6000819050919050565b6129e1816129ce565b82525050565b60006020820190506129fc60008301846129d8565b92915050565b612a0b816129ce565b8114612a1657600080fd5b50565b600081359050612a2881612a02565b92915050565b600060208284031215612a4457612a4361293e565b5b6000612a5284828501612a19565b91505092915050565b612a6481612963565b82525050565b6000602082019050612a7f6000830184612a5b565b92915050565b60008060408385031215612a9c57612a9b61293e565b5b6000612aaa8582860161298c565b9250506020612abb85828601612a19565b9150509250929050565b600080600060608486031215612ade57612add61293e565b5b6000612aec8682870161298c565b9350506020612afd86828701612a19565b9250506040612b0e8682870161298c565b9150509250925092565b60008060008060808587031215612b3257612b3161293e565b5b6000612b408782880161298c565b9450506020612b518782880161298c565b9350506040612b628782880161298c565b9250506060612b7387828801612a19565b91505092959194509250565b60008060408385031215612b9657612b9561293e565b5b6000612ba48582860161298c565b9250506020612bb58582860161298c565b9150509250929050565b6000606082019050612bd460008301866129d8565b612be160208301856129d8565b612bee60408301846129d8565b949350505050565b600080600060608486031215612c0f57612c0e61293e565b5b6000612c1d8682870161298c565b9350506020612c2e86828701612a19565b9250506040612c3f86828701612a19565b9150509250925092565b60008115159050919050565b612c5e81612c49565b82525050565b600060a082019050612c796000830188612c55565b612c8660208301876129d8565b612c9360408301866129d8565b612ca060608301856129d8565b612cad60808301846129d8565b9695505050505050565b612cc0816129ce565b82525050565b606082016000820151612cdc6000850182612cb7565b506020820151612cef6020850182612cb7565b506040820151612d026040850182612cb7565b50505050565b6000606082019050612d1d6000830184612cc6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d5d826129ce565b9150612d68836129ce565b9250828202612d76816129ce565b91508282048414831517612d8d57612d8c612d23565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612dce826129ce565b9150612dd9836129ce565b925082612de957612de8612d94565b5b828204905092915050565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732100000000000000600082015250565b6000612e3b601983612df4565b9150612e4682612e05565b602082019050919050565b60006020820190508181036000830152612e6a81612e2e565b9050919050565b7f546f6b656e206e6f7420737570706f7274656400000000000000000000000000600082015250565b6000612ea7601383612df4565b9150612eb282612e71565b602082019050919050565b60006020820190508181036000830152612ed681612e9a565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000612f13601d83612df4565b9150612f1e82612edd565b602082019050919050565b60006020820190508181036000830152612f4281612f06565b9050919050565b7f546f6b656e207072696365206e6f742073657400000000000000000000000000600082015250565b6000612f7f601383612df4565b9150612f8a82612f49565b602082019050919050565b60006020820190508181036000830152612fae81612f72565b9050919050565b6000606082019050612fca6000830186612a5b565b612fd76020830185612a5b565b612fe460408301846129d8565b949350505050565b612ff581612c49565b811461300057600080fd5b50565b60008151905061301281612fec565b92915050565b60006020828403121561302e5761302d61293e565b5b600061303c84828501613003565b91505092915050565b6000613050826129ce565b915061305b836129ce565b925082820190508082111561307357613072612d23565b5b92915050565b7f7265706179546f6b656e416d6f756e74206d757374206265206772656174657260008201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b60006130d5602783612df4565b91506130e082613079565b604082019050919050565b60006020820190508181036000830152613104816130c8565b9050919050565b7f61637475616c5265706179426f72726f77546f6b656e416d6f756e74206d757360008201527f742062652067726561746572207468616e203000000000000000000000000000602082015250565b6000613167603383612df4565b91506131728261310b565b604082019050919050565b600060208201905081810360008301526131968161315a565b9050919050565b6000815190506131ac81612a02565b92915050565b6000602082840312156131c8576131c761293e565b5b60006131d68482850161319d565b91505092915050565b7f496e73756666696369656e742061637475616c5265706179426f72726f77546f60008201527f6b656e416d6f756e742062616c616e6365000000000000000000000000000000602082015250565b600061323b603183612df4565b9150613246826131df565b604082019050919050565b6000602082019050818103600083015261326a8161322e565b9050919050565b7f496e73756666696369656e742061637475616c426f72726f77416d6f756e742060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b60006132cd602783612df4565b91506132d882613271565b604082019050919050565b600060208201905081810360008301526132fc816132c0565b9050919050565b600061330e826129ce565b9150613319836129ce565b925082820390508181111561333157613330612d23565b5b92915050565b600060408201905061334c6000830185612a5b565b61335960208301846129d8565b9392505050565b7f636f6c6c61746572616c546f6b656e416d6f756e74206d75737420626520677260008201527f6561746572207468616e20300000000000000000000000000000000000000000602082015250565b60006133bc602c83612df4565b91506133c782613360565b604082019050919050565b600060208201905081810360008301526133eb816133af565b9050919050565b7f666f725265706179416d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b600061344e602583612df4565b9150613459826133f2565b604082019050919050565b6000602082019050818103600083015261347d81613441565b9050919050565b7f496e73756666696369656e7420666f725265706179416d6f756e742062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b60006134e0602383612df4565b91506134eb82613484565b604082019050919050565b6000602082019050818103600083015261350f816134d3565b9050919050565b7f496e73756666696369656e742061637475616c436f6c6c61746572616c416d6f60008201527f756e742062616c616e6365000000000000000000000000000000000000000000602082015250565b6000613572602b83612df4565b915061357d82613516565b604082019050919050565b600060208201905081810360008301526135a181613565565b9050919050565b7f6d6f727467616765416d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b6000613604602583612df4565b915061360f826135a8565b604082019050919050565b60006020820190508181036000830152613633816135f7565b9050919050565b7f626f72726f77416d6f756e74206d75737420626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b6000613696602383612df4565b91506136a18261363a565b604082019050919050565b600060208201905081810360008301526136c581613689565b9050919050565b7f496e73756666696369656e7420626f72726f77416d6f756e742062616c616e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000613728602183612df4565b9150613733826136cc565b604082019050919050565b600060208201905081810360008301526137578161371b565b9050919050565b7f496e73756666696369656e74206d6f727467616765416d6f756e742062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b60006137ba602383612df4565b91506137c58261375e565b604082019050919050565b600060208201905081810360008301526137e9816137ad565b9050919050565b7f546f6b656e20616c726561647920616464656400000000000000000000000000600082015250565b6000613826601383612df4565b9150613831826137f0565b602082019050919050565b6000602082019050818103600083015261385581613819565b9050919050565b7f436f6c6c61746572616c466163746f7220746f6f206869676800000000000000600082015250565b6000613892601983612df4565b915061389d8261385c565b602082019050919050565b600060208201905081810360008301526138c181613885565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006138fe601483612df4565b9150613909826138c8565b602082019050919050565b6000602082019050818103600083015261392d816138f1565b9050919050565b600081519050919050565b60005b8381101561395d578082015181840152602081019050613942565b60008484015250505050565b6000601f19601f8301169050919050565b600061398582613934565b61398f8185612df4565b935061399f81856020860161393f565b6139a881613969565b840191505092915050565b600060408201905081810360008301526139cd818561397a565b90506139dc60208301846129d8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220c52abcefbb9d4bb920fcae20a5a9ba5c65a3c10c0f22e60f15e670b98f0fd35c64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063ad74b77511610097578063e486033911610066578063e486033914610299578063e6a69ab8146102cd578063f3fef3a3146102eb578063fd5908471461030757610100565b8063ad74b77514610211578063b2bdfa7b14610243578063bf5e27ec14610261578063dee1f2af1461027d57610100565b806347e7ef24116100d357806347e7ef241461019f5780635ceae9c4146101bb578063aab3f868146101d7578063aaf5eb68146101f357610100565b8063204120bc146101055780632154e6fc1461013557806336c8775414610153578063431f63c914610183575b600080fd5b61011f600480360381019061011a91906129a1565b610337565b60405161012c91906129e7565b60405180910390f35b61013d61034f565b60405161014a91906129e7565b60405180910390f35b61016d60048036038101906101689190612a2e565b610373565b60405161017a9190612a6a565b60405180910390f35b61019d60048036038101906101989190612a85565b6103b2565b005b6101b960048036038101906101b49190612a85565b610488565b005b6101d560048036038101906101d09190612ac5565b6107bf565b005b6101f160048036038101906101ec9190612b18565b610f52565b005b6101fb611872565b60405161020891906129e7565b60405180910390f35b61022b60048036038101906102269190612b7f565b61187e565b60405161023a93929190612bbf565b60405180910390f35b61024b6118b5565b6040516102589190612a6a565b60405180910390f35b61027b60048036038101906102769190612ac5565b6118d9565b005b61029760048036038101906102929190612bf6565b611fde565b005b6102b360048036038101906102ae91906129a1565b61227d565b6040516102c4959493929190612c64565b60405180910390f35b6102d56122c0565b6040516102e291906129e7565b60405180910390f35b61030560048036038101906103009190612a85565b6122c8565b005b610321600480360381019061031c9190612b7f565b6125ae565b60405161032e9190612d08565b60405180910390f35b60026020528060005260406000206000915090505481565b600a670de0b6b3a7640000600b6103669190612d52565b6103709190612dc3565b81565b6004818154811061038357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043790612e51565b60405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050e90612ebd565b60405180910390fd5b6000811161055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055190612f29565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390612f95565b60405180910390fd5b6105e63383612663565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161062393929190612fb5565b6020604051808303816000875af1158015610642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106669190613018565b5080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546106f69190613045565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461074f9190613045565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62836040516107b391906129e7565b60405180910390a35050565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1680156108675750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b6108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d90612ebd565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411801561093457506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096a90612f95565b60405180910390fd5b600082116109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ad906130eb565b60405180910390fd5b6000610a4183600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612818565b90506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ad29190612d52565b670de0b6b3a7640000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610b269190612d52565b610b309190612d52565b610b3a9190612dc3565b905060008111610b7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b769061317d565b60405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bb99190612a6a565b602060405180830381865afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa91906131b2565b1015610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3290613251565b60405180910390fd5b818573ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610c759190612a6a565b602060405180830381865afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb691906131b2565b1015610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee906132e3565b60405180910390fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610d869190613303565b9250508190555081600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254610ddf9190613303565b925050819055508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610e2393929190612fb5565b6020604051808303816000875af1158015610e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e669190613018565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ea2929190613337565b6020604051808303816000875af1158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190613018565b508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac468484604051610f4391906129e7565b60405180910390a35050505050565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff168015610ffa5750600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b611039576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103090612ebd565b60405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180156110c757506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b611106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fd90612f95565b60405180910390fd5b60008111611149576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611140906133d2565b60405180910390fd5b60006111d482600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154612818565b90506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112659190612d52565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a670de0b6b3a7640000600b6112bc9190612d52565b6112c69190612dc3565b846112d19190612d52565b6112db9190612d52565b6112e59190612dc3565b90506000811161132a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132190613464565b60405180910390fd5b808573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113649190612a6a565b602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a591906131b2565b10156113e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dd906134f6565b60405180910390fd5b818473ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016114209190612a6a565b602060405180830381865afa15801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906131b2565b10156114a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149990613588565b60405180910390fd5b6114e16040518060400160405280600281526020017f313a00000000000000000000000000000000000000000000000000000000000081525083612831565b61154b6040518060400160405280600281526020017f323a000000000000000000000000000000000000000000000000000000000000815250600a670de0b6b3a7640000600b6115319190612d52565b61153b9190612dc3565b846115469190612d52565b612831565b6115ff6040518060400160405280600281526020017f333a000000000000000000000000000000000000000000000000000000000000815250600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a670de0b6b3a7640000600b6115db9190612d52565b6115e59190612dc3565b856115f09190612d52565b6115fa9190612d52565b612831565b81600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461168e9190613303565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546116e79190613303565b925050819055508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161172b93929190612fb5565b6020604051808303816000875af115801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e9190613018565b508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016117aa929190613337565b6020604051808303816000875af11580156117c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ed9190613018565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe804d8db307862a5f35a3da24942f9cb36d1b20558edaaddced90ecbc46310f9876040516118629190612a6a565b60405180910390a4505050505050565b670de0b6b3a764000081565b6003602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154905083565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1680156119815750600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff165b6119c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b790612ebd565b60405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118015611a4e57506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b611a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8490612f95565b60405180910390fd5b60008211611ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac79061361a565b60405180910390fd5b6000670de0b6b3a7640000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b259190612d52565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611bb39190612d52565b611bbd9190612d52565b611bc79190612dc3565b905060008111611c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c03906136ac565b60405180910390fd5b808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c469190612a6a565b602060405180830381865afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8791906131b2565b1015611cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbf9061373e565b60405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611d029190612a6a565b602060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4391906131b2565b1015611d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7b906137d0565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611e139190613045565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254611e6c9190613045565b925050819055508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611eb093929190612fb5565b6020604051808303816000875af1158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef39190613018565b508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611f2f929190613337565b6020604051808303816000875af1158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f729190613018565b508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b5283604051611fd091906129e7565b60405180910390a350505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461206c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206390612e51565b60405180910390fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156120fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f39061383c565b60405180910390fd5b600a670de0b6b3a764000060096121139190612d52565b61211d9190612dc3565b81111561215f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612156906138a8565b60405180910390fd5b6040518060a00160405280600115158152602001600081526020016000815260200183815260200182815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101556040820151816002015560608201518160030155608082015181600401559050506004839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60016020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154905085565b6301e1338081565b6000811161230b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230290612f29565b60405180910390fd5b6123153383612663565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410156123d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ce90613914565b60405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546124669190613303565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546124bf9190613303565b925050819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612501929190613337565b6020604051808303816000875af1158015612520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125449190613018565b508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836040516125a291906129e7565b60405180910390a35050565b6125b6612913565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160020154426126f59190613303565b905060008111801561270b575060008260000154115b15612809576000670de0b6b3a76400006301e1338061272a9190612d52565b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154856000015461277d9190612d52565b6127879190612d52565b6127919190612dc3565b9050808360000160008282546127a79190613045565b9250508190555080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546128009190613045565b92505081905550505b42826002018190555050505050565b60008183106128275781612829565b825b905092915050565b6128c982826040516024016128479291906139b3565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128cd565b5050565b6128e4816128dc6128e7612908565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b612934819050919050565b60405180606001604052806000815260200160008152602001600081525090565b61293c6139e3565b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061296e82612943565b9050919050565b61297e81612963565b811461298957600080fd5b50565b60008135905061299b81612975565b92915050565b6000602082840312156129b7576129b661293e565b5b60006129c58482850161298c565b91505092915050565b6000819050919050565b6129e1816129ce565b82525050565b60006020820190506129fc60008301846129d8565b92915050565b612a0b816129ce565b8114612a1657600080fd5b50565b600081359050612a2881612a02565b92915050565b600060208284031215612a4457612a4361293e565b5b6000612a5284828501612a19565b91505092915050565b612a6481612963565b82525050565b6000602082019050612a7f6000830184612a5b565b92915050565b60008060408385031215612a9c57612a9b61293e565b5b6000612aaa8582860161298c565b9250506020612abb85828601612a19565b9150509250929050565b600080600060608486031215612ade57612add61293e565b5b6000612aec8682870161298c565b9350506020612afd86828701612a19565b9250506040612b0e8682870161298c565b9150509250925092565b60008060008060808587031215612b3257612b3161293e565b5b6000612b408782880161298c565b9450506020612b518782880161298c565b9350506040612b628782880161298c565b9250506060612b7387828801612a19565b91505092959194509250565b60008060408385031215612b9657612b9561293e565b5b6000612ba48582860161298c565b9250506020612bb58582860161298c565b9150509250929050565b6000606082019050612bd460008301866129d8565b612be160208301856129d8565b612bee60408301846129d8565b949350505050565b600080600060608486031215612c0f57612c0e61293e565b5b6000612c1d8682870161298c565b9350506020612c2e86828701612a19565b9250506040612c3f86828701612a19565b9150509250925092565b60008115159050919050565b612c5e81612c49565b82525050565b600060a082019050612c796000830188612c55565b612c8660208301876129d8565b612c9360408301866129d8565b612ca060608301856129d8565b612cad60808301846129d8565b9695505050505050565b612cc0816129ce565b82525050565b606082016000820151612cdc6000850182612cb7565b506020820151612cef6020850182612cb7565b506040820151612d026040850182612cb7565b50505050565b6000606082019050612d1d6000830184612cc6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d5d826129ce565b9150612d68836129ce565b9250828202612d76816129ce565b91508282048414831517612d8d57612d8c612d23565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612dce826129ce565b9150612dd9836129ce565b925082612de957612de8612d94565b5b828204905092915050565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732100000000000000600082015250565b6000612e3b601983612df4565b9150612e4682612e05565b602082019050919050565b60006020820190508181036000830152612e6a81612e2e565b9050919050565b7f546f6b656e206e6f7420737570706f7274656400000000000000000000000000600082015250565b6000612ea7601383612df4565b9150612eb282612e71565b602082019050919050565b60006020820190508181036000830152612ed681612e9a565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000612f13601d83612df4565b9150612f1e82612edd565b602082019050919050565b60006020820190508181036000830152612f4281612f06565b9050919050565b7f546f6b656e207072696365206e6f742073657400000000000000000000000000600082015250565b6000612f7f601383612df4565b9150612f8a82612f49565b602082019050919050565b60006020820190508181036000830152612fae81612f72565b9050919050565b6000606082019050612fca6000830186612a5b565b612fd76020830185612a5b565b612fe460408301846129d8565b949350505050565b612ff581612c49565b811461300057600080fd5b50565b60008151905061301281612fec565b92915050565b60006020828403121561302e5761302d61293e565b5b600061303c84828501613003565b91505092915050565b6000613050826129ce565b915061305b836129ce565b925082820190508082111561307357613072612d23565b5b92915050565b7f7265706179546f6b656e416d6f756e74206d757374206265206772656174657260008201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b60006130d5602783612df4565b91506130e082613079565b604082019050919050565b60006020820190508181036000830152613104816130c8565b9050919050565b7f61637475616c5265706179426f72726f77546f6b656e416d6f756e74206d757360008201527f742062652067726561746572207468616e203000000000000000000000000000602082015250565b6000613167603383612df4565b91506131728261310b565b604082019050919050565b600060208201905081810360008301526131968161315a565b9050919050565b6000815190506131ac81612a02565b92915050565b6000602082840312156131c8576131c761293e565b5b60006131d68482850161319d565b91505092915050565b7f496e73756666696369656e742061637475616c5265706179426f72726f77546f60008201527f6b656e416d6f756e742062616c616e6365000000000000000000000000000000602082015250565b600061323b603183612df4565b9150613246826131df565b604082019050919050565b6000602082019050818103600083015261326a8161322e565b9050919050565b7f496e73756666696369656e742061637475616c426f72726f77416d6f756e742060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b60006132cd602783612df4565b91506132d882613271565b604082019050919050565b600060208201905081810360008301526132fc816132c0565b9050919050565b600061330e826129ce565b9150613319836129ce565b925082820390508181111561333157613330612d23565b5b92915050565b600060408201905061334c6000830185612a5b565b61335960208301846129d8565b9392505050565b7f636f6c6c61746572616c546f6b656e416d6f756e74206d75737420626520677260008201527f6561746572207468616e20300000000000000000000000000000000000000000602082015250565b60006133bc602c83612df4565b91506133c782613360565b604082019050919050565b600060208201905081810360008301526133eb816133af565b9050919050565b7f666f725265706179416d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b600061344e602583612df4565b9150613459826133f2565b604082019050919050565b6000602082019050818103600083015261347d81613441565b9050919050565b7f496e73756666696369656e7420666f725265706179416d6f756e742062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b60006134e0602383612df4565b91506134eb82613484565b604082019050919050565b6000602082019050818103600083015261350f816134d3565b9050919050565b7f496e73756666696369656e742061637475616c436f6c6c61746572616c416d6f60008201527f756e742062616c616e6365000000000000000000000000000000000000000000602082015250565b6000613572602b83612df4565b915061357d82613516565b604082019050919050565b600060208201905081810360008301526135a181613565565b9050919050565b7f6d6f727467616765416d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b6000613604602583612df4565b915061360f826135a8565b604082019050919050565b60006020820190508181036000830152613633816135f7565b9050919050565b7f626f72726f77416d6f756e74206d75737420626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b6000613696602383612df4565b91506136a18261363a565b604082019050919050565b600060208201905081810360008301526136c581613689565b9050919050565b7f496e73756666696369656e7420626f72726f77416d6f756e742062616c616e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000613728602183612df4565b9150613733826136cc565b604082019050919050565b600060208201905081810360008301526137578161371b565b9050919050565b7f496e73756666696369656e74206d6f727467616765416d6f756e742062616c6160008201527f6e63650000000000000000000000000000000000000000000000000000000000602082015250565b60006137ba602383612df4565b91506137c58261375e565b604082019050919050565b600060208201905081810360008301526137e9816137ad565b9050919050565b7f546f6b656e20616c726561647920616464656400000000000000000000000000600082015250565b6000613826601383612df4565b9150613831826137f0565b602082019050919050565b6000602082019050818103600083015261385581613819565b9050919050565b7f436f6c6c61746572616c466163746f7220746f6f206869676800000000000000600082015250565b6000613892601983612df4565b915061389d8261385c565b602082019050919050565b600060208201905081810360008301526138c181613885565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006138fe601483612df4565b9150613909826138c8565b602082019050919050565b6000602082019050818103600083015261392d816138f1565b9050919050565b600081519050919050565b60005b8381101561395d578082015181840152602081019050613942565b60008484015250505050565b6000601f19601f8301169050919050565b600061398582613934565b61398f8185612df4565b935061399f81856020860161393f565b6139a881613969565b840191505092915050565b600060408201905081810360008301526139cd818561397a565b90506139dc60208301846129d8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220c52abcefbb9d4bb920fcae20a5a9ba5c65a3c10c0f22e60f15e670b98f0fd35c64736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 810,
        "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 826,
        "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(TokenInfo)801_storage)"
      },
      {
        "astId": 830,
        "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
        "label": "tokenPrices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 837,
        "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
        "label": "accounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Account)808_storage))"
      },
      {
        "astId": 840,
        "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
        "label": "acceptedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Account)808_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct DefiLendingDapp.Account))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Account)808_storage)"
      },
      "t_mapping(t_address,t_struct(Account)808_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DefiLendingDapp.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)808_storage"
      },
      "t_mapping(t_address,t_struct(TokenInfo)801_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DefiLendingDapp.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)801_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Account)808_storage": {
        "encoding": "inplace",
        "label": "struct DefiLendingDapp.Account",
        "members": [
          {
            "astId": 803,
            "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
            "label": "deposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 805,
            "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
            "label": "borrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 807,
            "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TokenInfo)801_storage": {
        "encoding": "inplace",
        "label": "struct DefiLendingDapp.TokenInfo",
        "members": [
          {
            "astId": 792,
            "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
            "label": "isAccepted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 794,
            "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
            "label": "totalSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 796,
            "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
            "label": "totalBorrowed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 798,
            "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
            "label": "interestRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 800,
            "contract": "contracts/DefiLendingDapp.sol:DefiLendingDapp",
            "label": "collateralFactor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}